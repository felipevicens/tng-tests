<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.4 on win32)" generated="20200113 16:01:58.527" rpa="false">
<suite id="s1" name="Test" source="C:\Users\asinatra\Desktop\ECLIPSE_WORKSPACE\tng-tests\tests\VnV\test_vnv_industrial_pilot_IPreq008\test.robot">
<test id="s1-t1" name="Setting the VnV Path">
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${from_date}</var>
</assign>
<msg timestamp="20200113 16:01:58.978" level="INFO">${from_date} = 2020-01-13 16:01:58.977</msg>
<status status="PASS" starttime="20200113 16:01:58.977" endtime="20200113 16:01:58.978"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${from_date}</arg>
</arguments>
<msg timestamp="20200113 16:01:58.978" level="INFO">${from_date} = 2020-01-13 16:01:58.977</msg>
<status status="PASS" starttime="20200113 16:01:58.978" endtime="20200113 16:01:58.978"></status>
</kw>
<kw name="Set Sp Path" library="tnglib">
<doc>Set the path were the SP can be reached.</doc>
<arguments>
<arg>${VNV_HOST}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:01:58.978" endtime="20200113 16:01:58.978"></status>
</kw>
<kw name="Sp Health Check" library="tnglib">
<doc>Check if SP is reachable.</doc>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200113 16:01:59.383" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20200113 16:01:58.978" endtime="20200113 16:01:59.383"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:01:59.384" endtime="20200113 16:01:59.384"></status>
</kw>
<status status="PASS" starttime="20200113 16:01:58.977" endtime="20200113 16:01:59.385" critical="yes"></status>
</test>
<test id="s1-t2" name="Clean the Packages">
<kw name="Get Packages" library="tnglib">
<doc>Returns info on all available packages.</doc>
<assign>
<var>@{PACKAGES}</var>
</assign>
<msg timestamp="20200113 16:01:59.806" level="INFO">@{PACKAGES} = [ True | [{'package_uuid': 'cc55a37a-20d9-42bb-b22c-1c68e336917a', 'name': 'ns-mediapilot-service', 'version': '0.9', 'created_at': '2020-01-13T08:16:05.978+00:00'}, {'package_uuid': 'bb4f649a-17fa-47...</msg>
<status status="PASS" starttime="20200113 16:01:59.386" endtime="20200113 16:01:59.806"></status>
</kw>
<kw name="${PACKAGE} IN [ @{PACKAGES[1]} ]" type="for">
<kw name="${PACKAGE} = {'package_uuid': 'cc55a37a-20d9-42bb-b22c-1c68e336917a', 'name': 'ns-mediapilot-service', 'version': '0.9', 'created_at': '2020-01-13T08:16:05.978+00:00'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PACKAGE['name']}'== '${NS_PACKAGE_SHORT_NAME}' or '${PACKAGE['name']}'== '${TST_PACKAGE_SHORT_NAME}'</arg>
<arg>Remove Package</arg>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:01:59.806" endtime="20200113 16:01:59.807"></status>
</kw>
<status status="PASS" starttime="20200113 16:01:59.806" endtime="20200113 16:01:59.807"></status>
</kw>
<kw name="${PACKAGE} = {'package_uuid': 'bb4f649a-17fa-47fd-bce7-14d02497dba5', 'name': 'media-mse-stress-test', 'version': '0.2', 'created_at': '2020-01-13T08:16:16.588+00:00'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PACKAGE['name']}'== '${NS_PACKAGE_SHORT_NAME}' or '${PACKAGE['name']}'== '${TST_PACKAGE_SHORT_NAME}'</arg>
<arg>Remove Package</arg>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:01:59.807" endtime="20200113 16:01:59.808"></status>
</kw>
<status status="PASS" starttime="20200113 16:01:59.807" endtime="20200113 16:01:59.808"></status>
</kw>
<kw name="${PACKAGE} = {'package_uuid': 'c6a57dd9-861c-429d-9271-d4b1a7c9a39b', 'name': 'tng-smpilot-ns1-k8s-egm', 'version': '1.3', 'created_at': '2020-01-13T14:09:41.495+00:00'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PACKAGE['name']}'== '${NS_PACKAGE_SHORT_NAME}' or '${PACKAGE['name']}'== '${TST_PACKAGE_SHORT_NAME}'</arg>
<arg>Remove Package</arg>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<kw name="Remove Package" library="tnglib">
<doc>Removes one package from the catalogue.</doc>
<arguments>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:01:59.809" endtime="20200113 16:02:00.226"></status>
</kw>
<status status="PASS" starttime="20200113 16:01:59.808" endtime="20200113 16:02:00.226"></status>
</kw>
<status status="PASS" starttime="20200113 16:01:59.808" endtime="20200113 16:02:00.226"></status>
</kw>
<kw name="${PACKAGE} = {'package_uuid': 'f521b97d-c7c4-47a6-b03b-a306fee08f3d', 'name': 'industrial-pilot-test-egm-rampup', 'version': '0.4', 'created_at': '2020-01-13T14:09:45.323+00:00'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PACKAGE['name']}'== '${NS_PACKAGE_SHORT_NAME}' or '${PACKAGE['name']}'== '${TST_PACKAGE_SHORT_NAME}'</arg>
<arg>Remove Package</arg>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<kw name="Remove Package" library="tnglib">
<doc>Removes one package from the catalogue.</doc>
<arguments>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:02:00.234" endtime="20200113 16:02:00.655"></status>
</kw>
<status status="PASS" starttime="20200113 16:02:00.228" endtime="20200113 16:02:00.656"></status>
</kw>
<status status="PASS" starttime="20200113 16:02:00.227" endtime="20200113 16:02:00.656"></status>
</kw>
<status status="PASS" starttime="20200113 16:01:59.806" endtime="20200113 16:02:00.656"></status>
</kw>
<status status="PASS" starttime="20200113 16:01:59.385" endtime="20200113 16:02:00.656" critical="yes"></status>
</test>
<test id="s1-t3" name="Upload the NS Package">
<kw name="Upload Package" library="tnglib">
<doc>Uploads a package from file.</doc>
<arguments>
<arg>${FILE_SOURCE_DIR}/${NS_PACKAGE_NAME}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200113 16:02:04.419" level="INFO">${result} = (True, '673f81da-a90d-4758-b347-4ca92c84d601')</msg>
<status status="PASS" starttime="20200113 16:02:00.659" endtime="20200113 16:02:04.420"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result[0]}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:02:04.420" endtime="20200113 16:02:04.421"></status>
</kw>
<status status="PASS" starttime="20200113 16:02:00.657" endtime="20200113 16:02:04.422" critical="yes"></status>
</test>
<test id="s1-t4" name="Upload the TST Package">
<kw name="Upload Package" library="tnglib">
<doc>Uploads a package from file.</doc>
<arguments>
<arg>${FILE_SOURCE_DIR}/${TST_PACKAGE_NAME}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200113 16:02:06.865" level="INFO">${result} = (True, 'bde5cc1e-b88e-4289-8f42-132372804e00')</msg>
<status status="PASS" starttime="20200113 16:02:04.424" endtime="20200113 16:02:06.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result[1]}</arg>
</arguments>
<msg timestamp="20200113 16:02:06.866" level="INFO">bde5cc1e-b88e-4289-8f42-132372804e00</msg>
<status status="PASS" starttime="20200113 16:02:06.866" endtime="20200113 16:02:06.867"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result[0]}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:02:06.867" endtime="20200113 16:02:06.867"></status>
</kw>
<status status="PASS" starttime="20200113 16:02:04.422" endtime="20200113 16:02:06.867" critical="yes"></status>
</test>
<test id="s1-t5" name="Wait For Service Instance Ready">
<kw name="Set Sp Path" library="tnglib">
<doc>Set the path were the SP can be reached.</doc>
<arguments>
<arg>${SP_HOST}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:02:06.869" endtime="20200113 16:02:06.869"></status>
</kw>
<kw name="Sp Health Check" library="tnglib">
<doc>Check if SP is reachable.</doc>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200113 16:02:07.320" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20200113 16:02:06.869" endtime="20200113 16:02:07.320"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:02:07.321" endtime="20200113 16:02:07.322"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>120</arg>
</arguments>
<msg timestamp="20200113 16:04:07.324" level="INFO">Slept 2 minutes</msg>
<status status="PASS" starttime="20200113 16:02:07.323" endtime="20200113 16:04:07.324"></status>
</kw>
<kw name="Get Requests" library="tnglib">
<doc>Returns info on all requests.</doc>
<assign>
<var>${request_list}</var>
</assign>
<msg timestamp="20200113 16:04:08.368" level="INFO">${request_list} = (True, [{'request_uuid': 'a22c7b8b-597e-4e16-b056-4e1c250d4246', 'request_type': 'CREATE_SERVICE', 'status': 'READY', 'created_at': '2020-01-13T14:38:46.954Z', 'instance_uuid': '42a2b487-7eb1-49cf-82c...</msg>
<status status="PASS" starttime="20200113 16:04:07.324" endtime="20200113 16:04:08.368"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${REQUEST}</arg>
<arg>${request_list[1][0]['request_uuid']}</arg>
</arguments>
<msg timestamp="20200113 16:04:08.370" level="INFO">${REQUEST} = a22c7b8b-597e-4e16-b056-4e1c250d4246</msg>
<status status="PASS" starttime="20200113 16:04:08.368" endtime="20200113 16:04:08.371"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>5 sec</arg>
<arg>Check Request Status</arg>
</arguments>
<kw name="Check Request Status">
<kw name="Get Request" library="tnglib">
<doc>Returns info on a specific request.</doc>
<arguments>
<arg>${REQUEST}</arg>
</arguments>
<assign>
<var>${requests}</var>
</assign>
<msg timestamp="20200113 16:04:08.866" level="INFO">${requests} = (True, {'blacklist': [], 'callback': '', 'created_at': '2020-01-13T14:38:46.954Z', 'vim_list': [], 'customer_email': '', 'customer_name': '', 'description': '', 'duration': 43.8629543781281, 'egresses...</msg>
<status status="PASS" starttime="20200113 16:04:08.372" endtime="20200113 16:04:08.866"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
<arg>${requests[1]['instance_uuid']}</arg>
</arguments>
<msg timestamp="20200113 16:04:08.869" level="INFO">${INSTANCE_UUID} = 42a2b487-7eb1-49cf-82c2-1ae3f64a1b49</msg>
<status status="PASS" starttime="20200113 16:04:08.866" endtime="20200113 16:04:08.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${READY}</arg>
<arg>${requests[1]['status']}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:04:08.869" endtime="20200113 16:04:08.870"></status>
</kw>
<status status="PASS" starttime="20200113 16:04:08.371" endtime="20200113 16:04:08.870"></status>
</kw>
<status status="PASS" starttime="20200113 16:04:08.371" endtime="20200113 16:04:08.871"></status>
</kw>
<status status="PASS" starttime="20200113 16:02:06.868" endtime="20200113 16:04:08.871" critical="yes"></status>
</test>
<test id="s1-t6" name="Wait For Test Execution">
<kw name="Set Sp Path" library="tnglib">
<doc>Set the path were the SP can be reached.</doc>
<arguments>
<arg>${VNV_HOST}</arg>
</arguments>
<status status="PASS" starttime="20200113 16:04:08.872" endtime="20200113 16:04:08.873"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20 min</arg>
<arg>5 sec</arg>
<arg>Check Test Result Status</arg>
</arguments>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:09.461" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:08.874" endtime="20200113 16:04:09.461"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:09.462" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:09.462" endtime="20200113 16:04:09.462"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:08.874" endtime="20200113 16:04:09.462"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:15.031" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:14.464" endtime="20200113 16:04:15.031"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:15.033" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:15.032" endtime="20200113 16:04:15.033"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:14.463" endtime="20200113 16:04:15.033"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:20.621" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:20.035" endtime="20200113 16:04:20.621"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:20.621" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:20.621" endtime="20200113 16:04:20.622"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:20.034" endtime="20200113 16:04:20.622"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:26.213" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:25.624" endtime="20200113 16:04:26.213"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:26.214" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:26.213" endtime="20200113 16:04:26.214"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:25.624" endtime="20200113 16:04:26.214"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:31.765" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:31.216" endtime="20200113 16:04:31.765"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:31.766" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:31.766" endtime="20200113 16:04:31.767"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:31.215" endtime="20200113 16:04:31.767"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:37.366" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:36.768" endtime="20200113 16:04:37.367"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:37.368" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:37.367" endtime="20200113 16:04:37.368"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:36.768" endtime="20200113 16:04:37.368"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:42.942" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:42.370" endtime="20200113 16:04:42.942"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:42.942" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:42.942" endtime="20200113 16:04:42.942"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:42.370" endtime="20200113 16:04:42.942"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:48.518" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:47.944" endtime="20200113 16:04:48.519"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:48.519" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:48.519" endtime="20200113 16:04:48.520"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:47.944" endtime="20200113 16:04:48.520"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:54.078" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:53.521" endtime="20200113 16:04:54.078"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:54.078" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:54.078" endtime="20200113 16:04:54.078"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:53.521" endtime="20200113 16:04:54.079"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:04:59.661" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:04:59.081" endtime="20200113 16:04:59.662"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:04:59.662" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:04:59.662" endtime="20200113 16:04:59.662"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:59.080" endtime="20200113 16:04:59.663"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:05:05.252" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:05:04.665" endtime="20200113 16:05:05.252"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:05:05.253" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:05:05.252" endtime="20200113 16:05:05.253"></status>
</kw>
<status status="FAIL" starttime="20200113 16:05:04.664" endtime="20200113 16:05:05.253"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:05:10.875" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:05:10.256" endtime="20200113 16:05:10.875"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:05:10.876" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:05:10.875" endtime="20200113 16:05:10.876"></status>
</kw>
<status status="FAIL" starttime="20200113 16:05:10.255" endtime="20200113 16:05:10.876"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:05:16.465" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:05:15.877" endtime="20200113 16:05:16.466"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:05:16.466" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:05:16.466" endtime="20200113 16:05:16.466"></status>
</kw>
<status status="FAIL" starttime="20200113 16:05:15.877" endtime="20200113 16:05:16.467"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 16:05:22.063" level="INFO">${test_uuid} = (True, [])</msg>
<status status="PASS" starttime="20200113 16:05:21.469" endtime="20200113 16:05:22.063"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 16:05:22.064" level="FAIL">Resolving variable '${test_uuid[1][0]['uuid']}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20200113 16:05:22.063" endtime="20200113 16:05:22.064"></status>
</kw>
<status status="FAIL" starttime="20200113 16:05:21.468" endtime="20200113 16:05:22.064"></status>
</kw>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<status status="FAIL" starttime="20200113 16:05:27.064" endtime="20200113 16:05:27.065"></status>
</kw>
<status status="FAIL" starttime="20200113 16:05:27.064" endtime="20200113 16:05:27.065"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:08.873" endtime="20200113 16:05:27.065"></status>
</kw>
<status status="FAIL" starttime="20200113 16:04:08.871" endtime="20200113 16:05:27.065" critical="yes">Execution terminated by signal</status>
</test>
<test id="s1-t7" name="Obtain GrayLogs">
<tags>
<tag>robot:exit</tag>
</tags>
<status status="FAIL" starttime="20200113 16:05:27.066" endtime="20200113 16:05:27.066" critical="yes">Test execution stopped due to a fatal error.</status>
</test>
<doc>Test suite for the MQTT broker stress test</doc>
<status status="FAIL" starttime="20200113 16:01:58.530" endtime="20200113 16:05:27.069"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="2">Critical Tests</stat>
<stat pass="5" fail="2">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="1" info="combined" combined="NOT robot:exit">NOT robot:exit</stat>
<stat pass="0" fail="1">robot:exit</stat>
</tag>
<suite>
<stat pass="5" fail="2" id="s1" name="Test">Test</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
