<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.4 on win32)" generated="20200113 15:09:37.187" rpa="false">
<suite id="s1" name="Test" source="C:\Users\asinatra\Desktop\ECLIPSE_WORKSPACE\tng-tests\tests\VnV\test_vnv_industrial_pilot_IPreq008\test.robot">
<test id="s1-t1" name="Setting the VnV Path">
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${from_date}</var>
</assign>
<msg timestamp="20200113 15:09:37.612" level="INFO">${from_date} = 2020-01-13 15:09:37.612</msg>
<status status="PASS" starttime="20200113 15:09:37.612" endtime="20200113 15:09:37.612"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${from_date}</arg>
</arguments>
<msg timestamp="20200113 15:09:37.612" level="INFO">${from_date} = 2020-01-13 15:09:37.612</msg>
<status status="PASS" starttime="20200113 15:09:37.612" endtime="20200113 15:09:37.613"></status>
</kw>
<kw name="Set Sp Path" library="tnglib">
<doc>Set the path were the SP can be reached.</doc>
<arguments>
<arg>${VNV_HOST}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:37.613" endtime="20200113 15:09:37.613"></status>
</kw>
<kw name="Sp Health Check" library="tnglib">
<doc>Check if SP is reachable.</doc>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200113 15:09:38.022" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20200113 15:09:37.613" endtime="20200113 15:09:38.022"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:38.023" endtime="20200113 15:09:38.023"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:37.611" endtime="20200113 15:09:38.024" critical="yes"></status>
</test>
<test id="s1-t2" name="Clean the Packages">
<kw name="Get Packages" library="tnglib">
<doc>Returns info on all available packages.</doc>
<assign>
<var>@{PACKAGES}</var>
</assign>
<msg timestamp="20200113 15:09:38.454" level="INFO">@{PACKAGES} = [ True | [{'package_uuid': 'cc55a37a-20d9-42bb-b22c-1c68e336917a', 'name': 'ns-mediapilot-service', 'version': '0.9', 'created_at': '2020-01-13T08:16:05.978+00:00'}, {'package_uuid': 'bb4f649a-17fa-47...</msg>
<status status="PASS" starttime="20200113 15:09:38.026" endtime="20200113 15:09:38.455"></status>
</kw>
<kw name="${PACKAGE} IN [ @{PACKAGES[1]} ]" type="for">
<kw name="${PACKAGE} = {'package_uuid': 'cc55a37a-20d9-42bb-b22c-1c68e336917a', 'name': 'ns-mediapilot-service', 'version': '0.9', 'created_at': '2020-01-13T08:16:05.978+00:00'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PACKAGE['name']}'== '${NS_PACKAGE_SHORT_NAME}' or '${PACKAGE['name']}'== '${TST_PACKAGE_SHORT_NAME}'</arg>
<arg>Remove Package</arg>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:38.455" endtime="20200113 15:09:38.456"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:38.455" endtime="20200113 15:09:38.456"></status>
</kw>
<kw name="${PACKAGE} = {'package_uuid': 'bb4f649a-17fa-47fd-bce7-14d02497dba5', 'name': 'media-mse-stress-test', 'version': '0.2', 'created_at': '2020-01-13T08:16:16.588+00:00'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PACKAGE['name']}'== '${NS_PACKAGE_SHORT_NAME}' or '${PACKAGE['name']}'== '${TST_PACKAGE_SHORT_NAME}'</arg>
<arg>Remove Package</arg>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:38.457" endtime="20200113 15:09:38.457"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:38.456" endtime="20200113 15:09:38.457"></status>
</kw>
<kw name="${PACKAGE} = {'package_uuid': '8157c0e4-44dc-4a0f-a92a-19d5f44a8eb1', 'name': 'tng-smpilot-ns1-k8s-egm', 'version': '1.3', 'created_at': '2020-01-13T14:08:46.059+00:00'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PACKAGE['name']}'== '${NS_PACKAGE_SHORT_NAME}' or '${PACKAGE['name']}'== '${TST_PACKAGE_SHORT_NAME}'</arg>
<arg>Remove Package</arg>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<kw name="Remove Package" library="tnglib">
<doc>Removes one package from the catalogue.</doc>
<arguments>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:38.459" endtime="20200113 15:09:38.940"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:38.458" endtime="20200113 15:09:38.940"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:38.458" endtime="20200113 15:09:38.940"></status>
</kw>
<kw name="${PACKAGE} = {'package_uuid': '8f0e48f2-5671-40a1-9098-351dad7ac954', 'name': 'industrial-pilot-test-egm-rampup', 'version': '0.4', 'created_at': '2020-01-13T14:08:49.793+00:00'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PACKAGE['name']}'== '${NS_PACKAGE_SHORT_NAME}' or '${PACKAGE['name']}'== '${TST_PACKAGE_SHORT_NAME}'</arg>
<arg>Remove Package</arg>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<kw name="Remove Package" library="tnglib">
<doc>Removes one package from the catalogue.</doc>
<arguments>
<arg>${PACKAGE['package_uuid']}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:38.941" endtime="20200113 15:09:39.365"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:38.941" endtime="20200113 15:09:39.366"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:38.940" endtime="20200113 15:09:39.366"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:38.455" endtime="20200113 15:09:39.366"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:38.024" endtime="20200113 15:09:39.366" critical="yes"></status>
</test>
<test id="s1-t3" name="Upload the NS Package">
<kw name="Upload Package" library="tnglib">
<doc>Uploads a package from file.</doc>
<arguments>
<arg>${FILE_SOURCE_DIR}/${NS_PACKAGE_NAME}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200113 15:09:43.085" level="INFO">${result} = (True, 'c6a57dd9-861c-429d-9271-d4b1a7c9a39b')</msg>
<status status="PASS" starttime="20200113 15:09:39.368" endtime="20200113 15:09:43.085"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result[0]}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:43.085" endtime="20200113 15:09:43.086"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:39.367" endtime="20200113 15:09:43.086" critical="yes"></status>
</test>
<test id="s1-t4" name="Upload the TST Package">
<kw name="Upload Package" library="tnglib">
<doc>Uploads a package from file.</doc>
<arguments>
<arg>${FILE_SOURCE_DIR}/${TST_PACKAGE_NAME}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200113 15:09:47.025" level="INFO">${result} = (True, 'f521b97d-c7c4-47a6-b03b-a306fee08f3d')</msg>
<status status="PASS" starttime="20200113 15:09:43.087" endtime="20200113 15:09:47.025"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result[1]}</arg>
</arguments>
<msg timestamp="20200113 15:09:47.026" level="INFO">f521b97d-c7c4-47a6-b03b-a306fee08f3d</msg>
<status status="PASS" starttime="20200113 15:09:47.025" endtime="20200113 15:09:47.026"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result[0]}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:47.027" endtime="20200113 15:09:47.027"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:43.087" endtime="20200113 15:09:47.027" critical="yes"></status>
</test>
<test id="s1-t5" name="Wait For Service Instance Ready">
<kw name="Set Sp Path" library="tnglib">
<doc>Set the path were the SP can be reached.</doc>
<arguments>
<arg>${SP_HOST}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:47.029" endtime="20200113 15:09:47.029"></status>
</kw>
<kw name="Sp Health Check" library="tnglib">
<doc>Check if SP is reachable.</doc>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200113 15:09:47.497" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20200113 15:09:47.030" endtime="20200113 15:09:47.497"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:09:47.498" endtime="20200113 15:09:47.498"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>120</arg>
</arguments>
<msg timestamp="20200113 15:11:47.500" level="INFO">Slept 2 minutes</msg>
<status status="PASS" starttime="20200113 15:09:47.498" endtime="20200113 15:11:47.501"></status>
</kw>
<kw name="Get Requests" library="tnglib">
<doc>Returns info on all requests.</doc>
<assign>
<var>${request_list}</var>
</assign>
<msg timestamp="20200113 15:11:48.537" level="INFO">${request_list} = (True, [{'request_uuid': '572b6050-e36f-44d4-bd01-46736cd94bf9', 'request_type': 'TERMINATE_SERVICE', 'status': 'READY', 'created_at': '2020-01-13T13:52:45.406Z', 'instance_uuid': '9b6a245e-10d8-47a4-...</msg>
<status status="PASS" starttime="20200113 15:11:47.501" endtime="20200113 15:11:48.537"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${REQUEST}</arg>
<arg>${request_list[1][0]['request_uuid']}</arg>
</arguments>
<msg timestamp="20200113 15:11:48.540" level="INFO">${REQUEST} = 572b6050-e36f-44d4-bd01-46736cd94bf9</msg>
<status status="PASS" starttime="20200113 15:11:48.537" endtime="20200113 15:11:48.541"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>5 sec</arg>
<arg>Check Request Status</arg>
</arguments>
<kw name="Check Request Status">
<kw name="Get Request" library="tnglib">
<doc>Returns info on a specific request.</doc>
<arguments>
<arg>${REQUEST}</arg>
</arguments>
<assign>
<var>${requests}</var>
</assign>
<msg timestamp="20200113 15:11:49.065" level="INFO">${requests} = (True, {'blacklist': [], 'callback': '', 'created_at': '2020-01-13T13:52:45.406Z', 'vim_list': [], 'customer_email': '', 'customer_name': '', 'description': '', 'duration': 5.46483159065247, 'egresses...</msg>
<status status="PASS" starttime="20200113 15:11:48.542" endtime="20200113 15:11:49.066"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
<arg>${requests[1]['instance_uuid']}</arg>
</arguments>
<msg timestamp="20200113 15:11:49.068" level="INFO">${INSTANCE_UUID} = 9b6a245e-10d8-47a4-b8f6-2fb46d2e3b4a</msg>
<status status="PASS" starttime="20200113 15:11:49.066" endtime="20200113 15:11:49.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${READY}</arg>
<arg>${requests[1]['status']}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:11:49.068" endtime="20200113 15:11:49.069"></status>
</kw>
<status status="PASS" starttime="20200113 15:11:48.542" endtime="20200113 15:11:49.069"></status>
</kw>
<status status="PASS" starttime="20200113 15:11:48.541" endtime="20200113 15:11:49.069"></status>
</kw>
<status status="PASS" starttime="20200113 15:09:47.028" endtime="20200113 15:11:49.069" critical="yes"></status>
</test>
<test id="s1-t6" name="Wait For Test Execution">
<kw name="Set Sp Path" library="tnglib">
<doc>Set the path were the SP can be reached.</doc>
<arguments>
<arg>${VNV_HOST}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:11:49.071" endtime="20200113 15:11:49.072"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20 min</arg>
<arg>5 sec</arg>
<arg>Check Test Result Status</arg>
</arguments>
<kw name="Check Test Result Status">
<kw name="Get Test Uuid By Instance Uuid" library="tnglib">
<doc>Returns the test_uuid on a specific test result filtering by instance_uuid.</doc>
<arguments>
<arg>${INSTANCE_UUID}</arg>
</arguments>
<assign>
<var>${test_uuid}</var>
</assign>
<msg timestamp="20200113 15:11:49.516" level="INFO">${test_uuid} = (True, [{'uuid': '7987d751-cbbb-4f6d-b72b-1328ade2bfe0'}])</msg>
<status status="PASS" starttime="20200113 15:11:49.074" endtime="20200113 15:11:49.516"></status>
</kw>
<kw name="Get Test Result" library="tnglib">
<doc>Returns info on a specific test result.</doc>
<arguments>
<arg>${test_uuid[1][0]['uuid']}</arg>
</arguments>
<assign>
<var>${results}</var>
</assign>
<msg timestamp="20200113 15:11:49.939" level="INFO">${results} = (True, {'created_at': '2020-01-13T13:52:45.096+00:00', 'details': [{'mqttprobe': ['']}], 'ended_at': '2020-01-13T13:52:45.071Z', 'instance_uuid': '9b6a245e-10d8-47a4-b8f6-2fb46d2e3b4a', 'package_id': ...</msg>
<status status="PASS" starttime="20200113 15:11:49.516" endtime="20200113 15:11:49.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${PASSED}</arg>
<arg>${results[1]['status']}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:11:49.940" endtime="20200113 15:11:49.941"></status>
</kw>
<status status="PASS" starttime="20200113 15:11:49.073" endtime="20200113 15:11:49.941"></status>
</kw>
<status status="PASS" starttime="20200113 15:11:49.073" endtime="20200113 15:11:49.942"></status>
</kw>
<status status="PASS" starttime="20200113 15:11:49.070" endtime="20200113 15:11:49.942" critical="yes"></status>
</test>
<test id="s1-t7" name="Obtain GrayLogs">
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${to_date}</var>
</assign>
<msg timestamp="20200113 15:11:49.944" level="INFO">${to_date} = 2020-01-13 15:11:49.944</msg>
<status status="PASS" starttime="20200113 15:11:49.944" endtime="20200113 15:11:49.944"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${param_file}</arg>
<arg>True</arg>
</arguments>
<msg timestamp="20200113 15:11:49.948" level="INFO">${param_file} = True</msg>
<status status="PASS" starttime="20200113 15:11:49.945" endtime="20200113 15:11:49.948"></status>
</kw>
<kw name="Get Logs" library="tnglib">
<arguments>
<arg>${from_date}</arg>
<arg>${to_date}</arg>
<arg>${VNV_HOST}</arg>
<arg>${param_file}</arg>
</arguments>
<status status="PASS" starttime="20200113 15:11:49.949" endtime="20200113 15:11:50.750"></status>
</kw>
<status status="PASS" starttime="20200113 15:11:49.943" endtime="20200113 15:11:50.750" critical="yes"></status>
</test>
<doc>Test suite for the MQTT broker stress test</doc>
<status status="PASS" starttime="20200113 15:09:37.189" endtime="20200113 15:11:50.751"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="Test">Test</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
